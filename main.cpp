#include <iostream>
using namespace std;

int main() {
  int x = 3;
  int *p_x = &x; 
  // * означает что p_x - это переменная типа "указатель"
  // & используется как оператор взятия адреса у переменной
  // то есть указатель p_x указывает на адрес переменной x
  // хорошим тоном считается начинать озаглавливание переменной указателя с буквы "p" - pointer
  return 0;
}





#include <iostream>
using namespace std;

int main() {
    int array[3]{ 11, 21, 31 };;
    for (int i = 0; i < 3; i++) {
        cout << array[i] << endl; // выводим значения массива с помощью индексов
    }
    cout << "<=====>" << endl;
    int *p_array = array;
        for (int i = 0; i < 3; i++) {
        cout << "Value:\t" << *(p_array + i) 
            << "   Address:\t" << p_array + i <<endl; // выводим значения и адреса значений массива с помощью указателей
        //если проводить разменование после пробавления к указателю, то мы получим значение, которое хранится в ячейке памяти, 
        //а если не производить разъименование, то получим адресс ячейки памяти
    }
    return 0;
}





#include <iostream>
using namespace std;

int foo(int *p_x) { // создаём функцию, которая принимает аргумент "p_x" в виде указателя типа int
  (*p_x)++; // чтобы инкрементировать значение через указатель, необходимо сначала разъименовать переменную, а после инкрементировать
  return 0;
}

int main (){
  int a = 0;
  cout << a << endl; // выводим не изменённую переменную
  foo(&a); // вызываем функцию foo и передаём ей адрес переменной "a", так как функция foo принимает указатель на перемнной, а не саму переменную
  cout << a << endl; // выводим уже изменённую переменную с помощью функции и указателя
  return 0;
}


asdasd